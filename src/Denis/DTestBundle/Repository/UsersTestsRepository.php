<?php

namespace Denis\DTestBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\QueryBuilder;

/**
 * UsersTestsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersTestsRepository extends EntityRepository
{
	public function getMaxAttempt($testId, $userId) {
		if(empty($testId) || empty($userId))
			return null;

		$querybuilder = $this->createQueryBuilder('ut')
            ->where('ut.testsId = :testId AND ut.usersId = :userId')
            ->select('MAX(ut.attempt)')
            ->setParameters([
            	':testId' => $testId,
            	':userId' => $userId,
            ]);

        return current($querybuilder->getQuery()->getOneOrNullResult());
	}

    public function getUsersTests($usersId) {
        if(empty($usersId))
            return [];

        $querybuilder = $this->createQueryBuilder('ut')
            ->leftJoin('ut.tests', 't')
            ->where('ut.usersId = :usersId')
            ->addSelect('ut, t')
            ->setParameter(':usersId', $usersId)
            ->groupBy('ut.id, t.id');

        return $querybuilder->getQuery()->getArrayResult();
    }

    public function getUserTestResult($usersId, $usersTestsId) {
        if(empty($usersId) || empty($usersTestsId))
            return [];

        $querybuilder = $this->createQueryBuilder('ut')
            ->leftJoin('ut.usersQuestionsAnswers', 'uqa')
            ->leftJoin('uqa.usersAnswers', 'ua')
            ->leftJoin('ut.tests', 't')
            ->leftJoin('uqa.questions', 'q')
            ->leftJoin('uqa.answers', 'a')
            ->leftJoin('ua.answers', 'uaa')
            ->where('ut.usersId = :usersId AND ut.id = :usersTestsId')
            ->select('ut, uqa, ua, t, q, a, uaa')
            ->groupBy('ut.id, uqa.id, ua.id, t.id, q.id, a.id, uaa.id')
            ->setParameters([
                ':usersId' => $usersId,
                ':usersTestsId' => $usersTestsId
            ]);

        return $querybuilder->getQuery()->getArrayResult();
    }
}
